import re

def generate_gadget_map(input_file_path, map_variable_name="webkit_gadget_offsets"):
    """
    Reads a file containing gadget definitions and generates a JavaScript Map string.

    Args:
        input_file_path (str): Path to the input file.
                               Each line should be in the format: "<gadget_string>" : <offset_hex>
        map_variable_name (str): The name for the JavaScript Map variable.

    Returns:
        str: A string containing the JavaScript code for the gadget Map.
    """
    gadget_entries = []
    try:
        with open(input_file_path, 'r') as f:
            for line in f:
                line = line.strip()
                if not line:
                    continue
                # Regex to capture "<gadget_string>" : <offset_hex>
                # It handles potential spaces around ':' and the offset
                match = re.match(r'(".*")\s*:\s*(0x[0-9a-fA-F]+)', line)
                if match:
                    gadget_string = match.group(1)
                    offset = match.group(2)
                    # Ensure consistent formatting for the gadget string (e.g., single quotes internally if needed by JS style)
                    # For now, we assume the input string is already correctly quoted for JS.
                    gadget_entries.append(f"    {gadget_string} : {offset},")
                else:
                    print(f"Warning: Could not parse line: {line}")
    except FileNotFoundError:
        return f"Error: Input file '{input_file_path}' not found."
    except Exception as e:
        return f"Error processing file: {e}"

    if not gadget_entries:
        return f"// No gadgets found or parsed from '{input_file_path}'.\nconst {map_variable_name} = new Map();"

    # Remove trailing comma from the last entry
    if gadget_entries:
        gadget_entries[-1] = gadget_entries[-1].rstrip(',')

    js_map_string = f"const {map_variable_name} = new Map(Object.entries({{\n"
    js_map_string += "\n".join(gadget_entries)
    js_map_string += "\n}));"

    return js_map_string

if __name__ == "__main__":
    # Create a dummy sample_gadgets.txt for testing if it doesn't exist
    # In a real scenario, this file would be provided or generated by another tool.
    sample_file = "/home/ubuntu/sample_gadgets.txt"
    # The file sample_gadgets.txt is already created in the previous step.
    
    generated_code = generate_gadget_map(sample_file)
    print(generated_code)

    # Example for a different map name
    # generated_libc_code = generate_gadget_map(sample_file, "libc_gadget_offsets")
    # print("\n// Example for libc_gadget_offsets")
    # print(generated_libc_code)

